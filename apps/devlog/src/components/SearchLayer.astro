---
import { Icon } from 'astro-icon/components'
---

<custom-search-layer>
  <dialog
    class="h-full w-full overflow-hidden rounded-lg bg-white text-th-text drop-shadow-md backdrop:fixed backdrop:inset-0 backdrop:overscroll-none backdrop:bg-black/30 backdrop:backdrop-blur-sm dark:border dark:border-th-border dark:bg-black md:max-h-[50%] md:max-w-lg"
  >
    <div class="flex h-full flex-col p-4">
      <div class="relative mb-4 flex h-8 gap-2">
        <div
          class="pointer-events-none absolute inset-y-0 start-0 flex items-center ps-2"
        >
          <Icon name="octicon:search-16" />
        </div>
        <input
          class="block h-8 w-full rounded-lg border border-th-border bg-th-bg-secondary px-3 ps-8 text-base text-th-text outline-none focus:ring-2 focus:ring-th-highlight/30 focus:ring-offset-2"
          data-search-input
          placeholder="Search Contents..."
          type="text"
        />
        <button
          class="flex aspect-square h-8 w-8 flex-none items-center justify-center md:hidden"
          data-search-close-button><Icon name="octicon:x-16" /></button
        >
      </div>
      <ul
        class="min-h-0 flex-1 overflow-y-auto px-2 py-1 text-sm"
        data-search-result
      >
      </ul>
      <div
        class="flex h-5 items-end justify-end font-sg text-xs text-th-text-secondary"
      >
        <span>
          Search by <a
            href="https://www.npmjs.com/package/astro-fuse"
            rel="noopener noreferrer"
            target="_blank">astro-fuse</a
          >
        </span>
      </div>
    </div>
  </dialog>
</custom-search-layer>

<script>
  import type { OutputBaseSearchable } from 'astro-fuse'
  import type Fuse from 'fuse.js'

  class SearchLayer extends HTMLElement {
    closeBtn = this.querySelector<HTMLButtonElement>(
      'button[data-search-close-button]'
    )!
    dialog = this.querySelector<HTMLDialogElement>('dialog')!
    fuse: Fuse<OutputBaseSearchable> | null = null
    input = this.querySelector<HTMLInputElement>('input[data-search-input]')!
    onCloseClick = () => this.dialog.close()
    onDialogClick = (e: MouseEvent) => {
      if ((e.target as HTMLElement).nodeName === 'DIALOG') {
        this.dialog.close()
      }
    }
    onDialogClose = () => {
      this.input.value = ''
      this.results.innerHTML = ''
    }
    onInput = async () => {
      const { input, results } = this

      const query = input.value.trim()

      if (!query) {
        results.innerHTML = ''
        return
      }

      const fuse = await this.load()
      const result = fuse.search(query, { limit: 8 })

      if (!result.length) {
        results.innerHTML = '<li class="no-result">No results</li>'
        return
      }

      results.innerHTML = result
        .map((entry) => {
          let text = entry.item.frontmatter.title

          const matched = entry.matches?.find(
            (match) => match.key === 'frontmatter.title'
          )

          if (matched) {
            const result: string[] = []
            const matches = [...matched.indices]
            let pair = matches.shift()

            for (let i = 0; i < text.length; i += 1) {
              const char = text.charAt(i)

              if (pair && i === pair[0]) {
                result.push('<b>')
              }

              result.push(char)

              if (pair && i === pair[1]) {
                result.push('</b>')
                pair = matches.shift()
              }
            }

            text = result.join('')
          }

          return `<li class="item"><a href="${entry.item.pathname.replace(/\/$/, '')}">${text}</a></li>`
        })
        .join('')
    }
    onSearch = () => {
      this.dialog.showModal()
      this.load()
    }

    results = this.querySelector<HTMLUListElement>('ul[data-search-result]')!

    connectedCallback() {
      window.addEventListener('search', this.onSearch)
      this.dialog.addEventListener('close', this.onDialogClose)
      this.dialog.addEventListener('click', this.onDialogClick)
      this.closeBtn.addEventListener('click', this.onCloseClick)
      this.input.addEventListener('input', this.onInput)
    }

    disconnectedCallback() {
      window.removeEventListener('search', this.onSearch)
    }

    async load() {
      if (this.fuse) {
        return this.fuse
      }

      const { loadFuse } = await import('astro-fuse/client')

      return (this.fuse = (await loadFuse({
        options: {
          includeMatches: true,
          threshold: 0.3,
        },
      })) as Fuse<OutputBaseSearchable>)
    }
  }

  customElements.define('custom-search-layer', SearchLayer)
</script>

<style>
  :global(html.dark) {
    dialog input,
    [data-search-result] :global(.item a) {
      --tw-ring-offset-color: #000;
    }
  }

  [data-search-result] {
    :global(.item) {
      @apply mb-2 rounded-sm;
    }

    :global(.item a) {
      @apply block rounded-sm py-1 outline-none focus:ring-2 focus:ring-th-highlight/30 focus:ring-offset-2;
    }

    :global(.item b) {
      @apply font-semibold;
    }

    :global(.item:last-of-type) {
      @apply mb-0;
    }
  }
</style>
